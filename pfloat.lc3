.orig x3000

LD r0, VALUE
JSR func_PRINT_SIGN
JSR func_PRINT_FLOAT
; JSR func_PRINT_INT
HALT
VALUE .fill b111011 ; p float = +3.11, p int = +59

; print a floating point 12 bit interger, 4 bit mantissa
; r0 - IN int
; r1 - divisor for leftshift, mask
; r2 - store r0
func_PRINT_FLOAT
ST r7, PFLOAT_R7
ST r0, PFLOAT_R0
ST r1, PFLOAT_R1
ST r2, PFLOAT_R2

AND r2, r0, r0 ; copy r0 to r2

; print integer part
AND r1, r1, #0 ; set r1 to zero
ADD r1, r1, #2 ; set r1 for leftshift
JSR func_DIV ; left shift 4 bits
AND r1, r1, #0 ; set r1 to zero
ADD r1, r1, #2 ; set r1 for leftshift
JSR func_DIV
AND r1, r1, #0 ; set r1 to zero
ADD r1, r1, #2 ; set r1 for leftshift
JSR func_DIV
AND r1, r1, #0 ; set r1 to zero
ADD r1, r1, #2 ; set r1 for leftshift
JSR func_DIV
JSR func_PRINT_INT ; print real part

LD r0, PFLOAT_CHAR_DOT ; load dot char
OUT ; print it

; print mantissa part
AND r0, r2, r2 ; copy r2 back to r0
LD r1, PFLOAT_INT_MASK ; load mask
AND r0, r0, r1 ; mask out the int part
JSR func_PRINT_INT ; print mantissa

LD r7, PFLOAT_R7
LD r0, PFLOAT_R0
LD r1, PFLOAT_R1
LD r2, PFLOAT_R2
RET
PFLOAT_R7 .fill #0
PFLOAT_R0 .fill #0
PFLOAT_R1 .fill #0
PFLOAT_R2 .fill #0
PFLOAT_CHAR_DOT .fill #46
PFLOAT_INT_MASK .fill xF
; func_PRINT_FLOAT


; print signed integer
; r0 - IN int
; r1 - store divisor
; r2 - divisor offset
; r3 - print zero test
; r4 - int to char value
func_PRINT_INT
ST r7, PINT_R7
ST r0, PINT_R0
ST r1, PINT_R1
ST r2, PINT_R2
ST r3, PINT_R3
ST r4, PINT_R4

; make int positive
AND r0, r0, r0 ; sign of r0
BRzp PINT_NEGATE
    NOT r0, r0 ; negate r0
    ADD r0, r0, #1 
PINT_NEGATE

; setup
LEA r2, PINT_DSOR ; address of divisor
LDR r1, r2, #0 ; value of first divisor
AND r3, r3, #0 ; zero the zero test
LD r4, PINT_CHAR_ZERO ; load zero char

; check if input is zero
AND r0, r0, r0
BRnp PINT_IS_ZERO
    AND r0, r4, r4 ; print zero char
    OUT
    BR PINT_DONE ; exit
PINT_IS_ZERO

; main loop
PINT_LOOP
    ; r0 has pos int, r1 has divisor
    JSR func_DIV
    ; r0 has int to print, r1 has next value to divide
    AND r0, r0, r0 ; sign of quotient
    BRz PINT_ZERO_IF 
        ; should be positive int < 10
        ADD r0, r0, r4 ; convert quotient to char
        OUT ; print it
        ADD r3, r3, #1 ; set the zero test
    BR PINT_ZERO_ELSE
    PINT_ZERO_IF 
        ; zero quotient
        AND r3, r3, r3 ; get sign of zero test
        BRz PINT_ZERO_ELSE
            AND r0, r4, r4 ; copy zero char to r0
            OUT ; print it
    PINT_ZERO_ELSE

    AND r0, r1, r1 ; copy remainder to dividend pos
    ADD r2, r2, #1 ; inc offset
    LDR r1, r2, #0 ; load next divisor
BRp PINT_LOOP

PINT_DONE
LD r7, PINT_R7
LD r0, PINT_R0
LD r1, PINT_R1
LD r2, PINT_R2
LD r3, PINT_R3
LD r4, PINT_R4
RET
PINT_CHAR_ZERO .fill #48
PINT_DSOR .fill #10000 
          .fill #1000 
          .fill #100 
          .fill #10
          .fill #1
          .fill #0
PINT_R7 .fill #0
PINT_R0 .fill #0
PINT_R1 .fill #0
PINT_R2 .fill #0
PINT_R3 .fill #0
PINT_R4 .fill #0
; func_PRINT_INT

; print sign of an integer
; r0 - IN int
func_PRINT_SIGN
ST r7, PSIGN_R7
ST r0, PSIGN_R0

AND r0, r0, r0 ; get sign of r0
BRn PSIGN_IF ; pos, zero
    LD r0, PSIGN_PLUS
    OUT
    BR PSIGN_ELSE 
PSIGN_IF ; neg
    LD r0, PSIGN_NEG
    OUT
PSIGN_ELSE

LD r7, PSIGN_R7
LD r0, PSIGN_R0
RET
PSIGN_PLUS .fill #43
PSIGN_NEG .fill #45
PSIGN_R7 .fill #0
PSIGN_R0 .fill #0
; func_PRINT_SIGN

; Overly complex divide function that accounts for negatives and zero
; r0 - IN dividend, OUT quotient
; r1 - IN divisor, OUT remainder
; r2 - store the division count/quotient
; r3 - store negative test
func_DIV
    ST r2, DIV_SAVE_R2
    ST r3, DIV_SAVE_R3
    AND r2, r2, #0 ; init r2 and r3
    AND r3, r3, #0

    ; Dividend is zero then return zero
    AND r0, r0, r0 ; get sign of r0
    BRnp DIV_DIVIDEND_ZERO
        AND r0, r1, r1 ; set remainder
        ADD r3, r3, #1 ; disable negate fix
        BR DIV_DONE ; r2 will be zero/result, remain is r1
    DIV_DIVIDEND_ZERO

    ; Divisor cant be zero
    AND r1, r1, r1 ; get sign of r1
    BRnp DIV_DIVISOR_ZERO
        HALT ; exception divide by zero
    DIV_DIVISOR_ZERO

    ; Make the dividend positive
    AND r0, r0, r0 ; store sign of r0 in cc
    BRp DIV_DIVIDEND_POS
        NOT r0, r0
        ADD r0, r0, #1
        ADD r3, r3, #1 ; if r3 is zero then out is negative
    DIV_DIVIDEND_POS

    ; Make divisor negative
    AND r1, r1, r1 ; store sign of r1 in cc
    BRn DIV_LOOP ; DIV_DIVISOR_NEG
        NOT r1, r1
        ADD r1, r1, #1
        ADD r3, r3, #-1 ; if r3 is zero then out is negative
    ; DIV_DIVISOR_NEG

    DIV_LOOP
        ADD r2, r2, #1 ; inc div count
        ADD r0, r0, r1 ; sub divisor from dividend
    BRp DIV_LOOP

    AND r0, r0, r0 ; get sign of remainder
    BRz DIV_DONE ; DIV_GET_REMAIN ; r0 should only be 0 or neg
        NOT r1, r1 ; negate r1 to add back to remainder
        ADD r1, r1, #1 ; final sign dosnt matter
        ADD r0, r0, r1 ; r0 now holds positive remainder
        ADD r2, r2, #-1 ; Dec the div count since went one over
    ; DIV_GET_REMAIN ; r0 was zero, no remainder

    DIV_DONE
    AND r1, r0, r0 ; copy remainder to r1
    AND r0, r2, r2 ; copy division count to r0

    ; Fix sign for quotient, remainder is always positive
    AND r3, r3, r3 ; get sign of neg test
    BRnp DIV_NEGATE_FIX ; dendpos +1 dsorpos -1 = 0
        NOT r0, r0
        ADD r0, r0, #1
    DIV_NEGATE_FIX

    ; restore registers
    LD r2, DIV_SAVE_R2
    LD r3, DIV_SAVE_R3
RET
DIV_SAVE_R2 .fill #0
DIV_SAVE_R3 .fill #0
; func_DIV

.end