void write_OS(uint16_t memory[]) {
  // Trap vector table (valid entries)
  memory[0x0020] = 0x0400;
  memory[0x0021] = 0x0430;
  memory[0x0022] = 0x0450;
  memory[0x0023] = 0x04A0;
  memory[0x0024] = 0x04E0;
  memory[0x0025] = 0xFD70;
  // Implementation of GETC
  memory[0x0400] = 0x3E08;
  memory[0x0401] = 0x2004;
  memory[0x0402] = 0xB004;
  memory[0x0403] = 0xA004;
  memory[0x0404] = 0x2E04;
  memory[0x0405] = 0xC1C0;
  memory[0x0406] = 0x8000;
  memory[0x0407] = 0xFE00;
  memory[0x0408] = 0xFE02;
  // Implementation of OUT
  memory[0x0430] = 0x3E0A;
  memory[0x0431] = 0x3208;
  memory[0x0432] = 0xA205;
  memory[0x0433] = 0x07FE;
  memory[0x0434] = 0xB004;
  memory[0x0435] = 0x2204;
  memory[0x0436] = 0x2E04;
  memory[0x0437] = 0xC1C0;
  memory[0x0438] = 0xFE04;
  memory[0x0439] = 0xFE06;
  // Implementation of PUTS
  memory[0x0450] = 0x3E16;
  memory[0x0451] = 0x3012;
  memory[0x0452] = 0x3212;
  memory[0x0453] = 0x3412;
  memory[0x0454] = 0x6200;
  memory[0x0455] = 0x0405;
  memory[0x0456] = 0xA409;
  memory[0x0457] = 0x07FE;
  memory[0x0458] = 0xB208;
  memory[0x0459] = 0x1021;
  memory[0x045A] = 0x0FF9;
  memory[0x045B] = 0x2008;
  memory[0x045C] = 0x2208;
  memory[0x045D] = 0x2408;
  memory[0x045E] = 0x2E08;
  memory[0x045F] = 0xC1C0;
  memory[0x0460] = 0xFE04;
  memory[0x0461] = 0xFE06;
  memory[0x0462] = 0xF3FD;
  memory[0x0463] = 0xF3FE;
  // Implementation of IN
  memory[0x04A0] = 0x3E06;  // ST R7, SaveR7
  memory[0x04A1] = 0xE006;  // LEA R0, Message
  memory[0x04A2] = 0xF022;  // PUTS
  memory[0x04A3] = 0xF020;  // GETC
  memory[0x04A4] = 0xF021;  // OUT
  memory[0x04A5] = 0x2E01;  // LD R7, SaveR7
  memory[0x04A6] = 0xC1C0;  // RET
  memory[0x04A7] = 0x3001;  // SaveR7 (.BLKW #1)
  /* the "Input a character> " message goes here */
  char inputPrompt[] = "Input a character> \0";
  for (size_t i = 0; i < 21; i++) memory[0x04A8 + i] = inputPrompt[i];

  // Implementation of PUTSP
  memory[0x04E0] = 0x3E27;
  memory[0x04E1] = 0x3022;
  memory[0x04E2] = 0x3222;
  memory[0x04E3] = 0x3422;
  memory[0x04E4] = 0x3622;
  memory[0x04E5] = 0x1220;
  memory[0x04E6] = 0x6040;
  memory[0x04E7] = 0x0406;
  memory[0x04E8] = 0x480D;
  memory[0x04E9] = 0x2418;
  memory[0x04EA] = 0x5002;
  memory[0x04EB] = 0x0402;
  memory[0x04EC] = 0x1261;
  memory[0x04ED] = 0x0FF8;
  memory[0x04EE] = 0x2014;
  memory[0x04EF] = 0x4806;
  memory[0x04F0] = 0x2013;
  memory[0x04F1] = 0x2213;
  memory[0x04F2] = 0x2413;
  memory[0x04F3] = 0x2613;
  memory[0x04F4] = 0x2E13;
  memory[0x04F5] = 0xC1C0;
  memory[0x04F6] = 0x3E06;
  memory[0x04F7] = 0xA607;
  memory[0x04F8] = 0x0801;
  memory[0x04F9] = 0x0FFC;
  memory[0x04FA] = 0xB003;
  memory[0x04FB] = 0x2E01;
  memory[0x04FC] = 0xC1C0;
  memory[0x04FE] = 0xFE06;
  memory[0x04FF] = 0xFE04;
  memory[0x0500] = 0xF3FD;
  memory[0x0501] = 0xF3FE;
  memory[0x0502] = 0xFF00;
  // Implementation of HALT
  memory[0xFD00] = 0x3E3E;
  memory[0xFD01] = 0x303C;
  memory[0xFD02] = 0x2007;
  memory[0xFD03] = 0xF021;
  memory[0xFD04] = 0xE006;
  memory[0xFD05] = 0xF022;
  memory[0xFD06] = 0xF025;
  memory[0xFD07] = 0x2036;
  memory[0xFD08] = 0x2E36;
  memory[0xFD09] = 0xC1C0;
  memory[0xFD70] = 0x3E0E;
  memory[0xFD71] = 0x320C;
  memory[0xFD72] = 0x300A;
  memory[0xFD73] = 0xE00C;
  memory[0xFD74] = 0xF022;
  memory[0xFD75] = 0xA22F;
  memory[0xFD76] = 0x202F;
  memory[0xFD77] = 0x5040;
  memory[0xFD78] = 0xB02C;
  memory[0xFD79] = 0x2003;
  memory[0xFD7A] = 0x2203;
  memory[0xFD7B] = 0x2E03;
  memory[0xFD7C] = 0xC1C0;
  /* the "halting the processor" message goes here */
  char haltMessage[] = "\n----- Halting the processor ----- \n\0";
  for (size_t i = 0; i < 38; i++) memory[0xFD80 + i] = haltMessage[i];

  memory[0xFDA5] = 0xFFFE;
  memory[0xFDA6] = 0x7FFF;
  // Display status register
  memory[0xFE04] = 0x8000;
  // Machine control register
  memory[0xFFFE] = 0xFFFF;

  // Bad traps
  for (int i = 0; i < 0xFF; i++) {
    if (memory[i] == 0) memory[i] = 0xFD00;
  }
}